import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class ShamirSecretSharing {

    public static BigInteger decodeValue(String value, int base) {
        return new BigInteger(value, base);
    }

    public static BigInteger findConstantTerm(Map<Integer, BigInteger> roots, int k) {
        int n = roots.size();
        BigInteger[][] A = new BigInteger[k][k];  
        BigInteger[] b = new BigInteger[k];       
        
        for (int i = 0; i < k; i++) {
            b[i] = roots.get(i + 1);  
            for (int j = 0; j < k; j++) {
                int x = i + 1;  
                A[i][j] = BigInteger.valueOf((long) Math.pow(x, j));
            }
        }
        BigInteger[] coeffs = gaussianElimination(A, b);

        return coeffs[0];
    }

    public static BigInteger[] gaussianElimination(BigInteger[][] A, BigInteger[] b) {
        int n = A.length;
        BigInteger[] coeffs = new BigInteger[n];
                for (int i = 0; i < n; i++) {
            A[i] = concatenate(A[i], b[i]);
        }
        
        for (int i = 0; i < n; i++) {
            if (A[i][i].equals(BigInteger.ZERO)) {
                for (int j = i + 1; j < n; j++) {
                    if (!A[j][i].equals(BigInteger.ZERO)) {
                        BigInteger[] temp = A[i];
                        A[i] = A[j];
                        A[j] = temp;
                        BigInteger tempB = b[i];
                        b[i] = b[j];
                        b[j] = tempB;
                        break;
                    }
                }
            }
            
            BigInteger divisor = A[i][i];
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j].divide(divisor);
            }
            b[i] = b[i].divide(divisor);

            for (int j = i + 1; j < n; j++) {
                BigInteger factor = A[j][i];
                for (int col = 0; col < n; col++) {
                    A[j][col] = A[j][col].subtract(A[i][col].multiply(factor));
                }
                b[j] = b[j].subtract(b[i].multiply(factor));
            }
        }

        for (int i = n - 1; i >= 0; i--) {
            coeffs[i] = b[i];
            for (int j = i + 1; j < n; j++) {
                coeffs[i] = coeffs[i].subtract(A[i][j].multiply(coeffs[j]));
            }
        }

        return coeffs;
    }

    public static BigInteger[] concatenate(BigInteger[] row, BigInteger value) {
        BigInteger[] newRow = new BigInteger[row.length + 1];
        System.arraycopy(row, 0, newRow, 0, row.length);
        newRow[row.length] = value;
        return newRow;
    }

    public static void main(String[] args) {
        Map<Integer, Map<String, String>> data = new HashMap<>();
        data.put(1, Map.of("base", "7", "value", "420020006424065463"));
        data.put(2, Map.of("base", "7", "value", "10511630252064643035"));
        data.put(3, Map.of("base", "2", "value", "101010101001100101011100000001000111010010111101100100010"));
        data.put(4, Map.of("base", "8", "value", "31261003022226126015"));
        data.put(5, Map.of("base", "7", "value", "2564201006101516132035"));
        data.put(6, Map.of("base", "15", "value", "a3c97ed550c69484"));
        data.put(7, Map.of("base", "13", "value", "134b08c8739552a734"));
        data.put(8, Map.of("base", "10", "value", "23600283241050447333"));
        data.put(9, Map.of("base", "9", "value", "375870320616068547135"));
        data.put(10, Map.of("base", "6", "value", "30140555423010311322515333"));

        Map<Integer, BigInteger> roots = new HashMap<>();
        for (Map.Entry<Integer, Map<String, String>> entry : data.entrySet()) {
            int x = entry.getKey();
            String baseStr = entry.getValue().get("base");
            String valueStr = entry.getValue().get("value");
            int base = Integer.parseInt(baseStr);
            BigInteger y = decodeValue(valueStr, base);
            roots.put(x, y);
        }

        int k = 7;

        BigInteger constantTerm = findConstantTerm(roots, k);
        System.out.println("The constant term (c) is: " + constantTerm);
    }
}
